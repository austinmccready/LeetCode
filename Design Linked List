class MyLinkedList {
private:
    struct Node {
        int value;
        Node* next = NULL; // node* means pointing to next int which is NULL
        Node(int val) {
            value = val;
            next = nullptr;
        }
    };
    
    Node* head;
    int size;
    
public:
    // Initialize your data structure here
    MyLinkedList() {
        head = nullptr;
        size = 0;
    }
    
    // Get the value of the index-th node in the linked list. If the index is invalid, return -1
    int get(int index) {
       if (index >= size || index < 0) {
           return -1;
       }
        else {
            Node* currentNode = head;
            
            for (int i = 0; i < index; i++) { // gets us to the node before the index
                currentNode = currentNode->next; // moves us forward to the node of the index
            }
            
            return currentNode->value;
        }
    }
    
    // Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list
    void addAtHead(int val) {
       addAtIndex(0, val);
        
    }
    
    // Append a node of value val to the last element of the linked list
    void addAtTail(int val) {
       addAtIndex(size, val);
        
    }
    
    // Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be insterted.
    void addAtIndex(int index, int val) {
         if (index > size || index < 0) {
           return;
        }
        Node* newNode = new Node(val);
        Node* currentNode = head;
        
        if (index ==0) {
            newNode->next = head;
            head = newNode;
        }
        else {
            for (int i = 0; i < index -1; i++) {
                currentNode = currentNode->next;
            }
            
            newNode->next = currentNode->next;
            currentNode->next = newNode;
        }
        
        size++;
    }
    
    // Delete the index-th node in the linked list, if the index is valid
    void deleteAtIndex(int index) {
       if (index >= size || index < 0) {
           return;
        }
        else if (index == 0) { // need to reassign head, so this is a special case
            Node* tempNode = head;
            head = head->next;
            delete tempNode;
        }
        else {
            Node *currentNode = head;
            
            for (int i = 0; i < index -1; i++) {
                currentNode = currentNode->next;
            }
            Node* nextNode = currentNode->next->next; // points to node AFTER the one we want to delete
            delete currentNode->next;
            currentNode->next = nextNode;
        }
        
        size--;
    }
    
    // Need a destructor to get rid of every node in a created list, which the default does not do
    ~MyLinkedList() {
        Node* nodeToDelete = head;
        
        while (nodeToDelete != nullptr) {
            head = head->next;
            delete nodeToDelete;
            nodeToDelete = head;
        }
    }
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
